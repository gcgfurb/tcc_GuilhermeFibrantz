//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Samples/Google Cardboard XR Plugin for Unity/1.21.0/Hello Cardboard/Scenes/Controle.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controle: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controle()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controle"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f876dc74-48c5-44ba-b502-31aa7b4d5fb7"",
            ""actions"": [
                {
                    ""name"": ""Aumentar"",
                    ""type"": ""PassThrough"",
                    ""id"": ""99c8471b-a4cd-44c0-8bb0-c95274850be5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Diminuir"",
                    ""type"": ""Button"",
                    ""id"": ""14a0b679-2910-4964-98bd-f923ca672007"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveEsquerda"",
                    ""type"": ""Button"",
                    ""id"": ""08277863-fc59-4802-8c0c-3d070d357d8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDireita"",
                    ""type"": ""Button"",
                    ""id"": ""31dccaef-f63a-4c3e-870c-f67b3447b987"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0fe0fd44-8492-44aa-a2fc-e0e896c3dee5"",
                    ""path"": ""<HID::YiChip BT KB>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aumentar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49352fa8-9537-4fc1-b5a6-531688a38391"",
                    ""path"": ""<HID::YiChip BT KB>/hat/down"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Diminuir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d42a852-0522-4ce7-9e4a-bf2cf01b8011"",
                    ""path"": ""<HID::YiChip BT KB>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveEsquerda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36bd2f91-c9ed-4d1a-bddf-fad336110831"",
                    ""path"": ""<HID::YiChip BT KB>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDireita"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Aumentar = m_Gameplay.FindAction("Aumentar", throwIfNotFound: true);
        m_Gameplay_Diminuir = m_Gameplay.FindAction("Diminuir", throwIfNotFound: true);
        m_Gameplay_MoveEsquerda = m_Gameplay.FindAction("MoveEsquerda", throwIfNotFound: true);
        m_Gameplay_MoveDireita = m_Gameplay.FindAction("MoveDireita", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Aumentar;
    private readonly InputAction m_Gameplay_Diminuir;
    private readonly InputAction m_Gameplay_MoveEsquerda;
    private readonly InputAction m_Gameplay_MoveDireita;
    public struct GameplayActions
    {
        private @Controle m_Wrapper;
        public GameplayActions(@Controle wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aumentar => m_Wrapper.m_Gameplay_Aumentar;
        public InputAction @Diminuir => m_Wrapper.m_Gameplay_Diminuir;
        public InputAction @MoveEsquerda => m_Wrapper.m_Gameplay_MoveEsquerda;
        public InputAction @MoveDireita => m_Wrapper.m_Gameplay_MoveDireita;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Aumentar.started += instance.OnAumentar;
            @Aumentar.performed += instance.OnAumentar;
            @Aumentar.canceled += instance.OnAumentar;
            @Diminuir.started += instance.OnDiminuir;
            @Diminuir.performed += instance.OnDiminuir;
            @Diminuir.canceled += instance.OnDiminuir;
            @MoveEsquerda.started += instance.OnMoveEsquerda;
            @MoveEsquerda.performed += instance.OnMoveEsquerda;
            @MoveEsquerda.canceled += instance.OnMoveEsquerda;
            @MoveDireita.started += instance.OnMoveDireita;
            @MoveDireita.performed += instance.OnMoveDireita;
            @MoveDireita.canceled += instance.OnMoveDireita;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Aumentar.started -= instance.OnAumentar;
            @Aumentar.performed -= instance.OnAumentar;
            @Aumentar.canceled -= instance.OnAumentar;
            @Diminuir.started -= instance.OnDiminuir;
            @Diminuir.performed -= instance.OnDiminuir;
            @Diminuir.canceled -= instance.OnDiminuir;
            @MoveEsquerda.started -= instance.OnMoveEsquerda;
            @MoveEsquerda.performed -= instance.OnMoveEsquerda;
            @MoveEsquerda.canceled -= instance.OnMoveEsquerda;
            @MoveDireita.started -= instance.OnMoveDireita;
            @MoveDireita.performed -= instance.OnMoveDireita;
            @MoveDireita.canceled -= instance.OnMoveDireita;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnAumentar(InputAction.CallbackContext context);
        void OnDiminuir(InputAction.CallbackContext context);
        void OnMoveEsquerda(InputAction.CallbackContext context);
        void OnMoveDireita(InputAction.CallbackContext context);
    }
}
